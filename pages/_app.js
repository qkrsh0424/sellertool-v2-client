import Head from 'next/head';
import '../styles/globals.css';
import wrapper from '../redux/reducers/configureStore';
import { useDispatch, useSelector } from 'react-redux';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { userDataConnect } from '../data_connect/userDataConnect';
import DispatchWorkspaceComponent from '../redux/dispatch_component/DispatchWorkspaceComponent';
import { isAnonymous } from '../utils/cookieCheckUtils';

const theme = createTheme();

/**
 * 진진 파랑 : #2C73D2;
 * 진 파랑 : #309FFF;
 * 중간 파랑 : #609FFF;
 * 연 파랑 : #7DC2FF;
 * 핑크 : #db2e5e;
 * 그린 : #50bb1a;
 */
function MyApp({ Component, pageProps }) {
	const router = useRouter();
	const dispatch = useDispatch();

	useEffect(() => {
		async function userFetchInit() {
			if (!router.isReady) {
				return;
			}

			if (isAnonymous()) {
				dispatch({
					type: 'USERSTATE_SET_INFO',
					payload: null
				});

				dispatch({
					type: 'USERSTATE_SET_LOADING',
					payload: false
				});
				return;
			}
			await userDataConnect().getInfoOwn()
				.then(res => {
					if (res?.status === 200 && res?.data?.message === 'success') {
						dispatch({
							type: 'USERSTATE_SET_INFO',
							payload: res.data.data
						})
					} else {
						dispatch({
							type: 'USERSTATE_SET_INFO',
							payload: null
						});
					}
				})
				.catch(err => {
					let res = err.response;
					dispatch({
						type: 'USERSTATE_SET_INFO',
						payload: null
					});
					if (res.status === 500) {
						alert('undefined error.');
						return;
					}
					// alert(res?.data?.memo);
				})
			dispatch({
				type: 'USERSTATE_SET_LOADING',
				payload: false
			});

		}
		userFetchInit();
	}, [router]);

	return (
		<>
			<Head>
				<title>셀러툴</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<DispatchWorkspaceComponent></DispatchWorkspaceComponent>
			<ThemeProvider theme={theme}>
				<Component {...pageProps} />
			</ThemeProvider>
		</>
	)
}

export default wrapper.withRedux(MyApp);
